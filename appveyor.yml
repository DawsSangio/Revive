image: Visual Studio 2017
clone_folder: c:\projects\revive

environment:
  QTDIR: C:\Qt\5.13.2\msvc2017_64

install:
  - git submodule update --init --recursive
  - mkdir c:\projects\download_cache
  # query Oculus SDK website for download link
  - curl -fsSL -o c:\projects\download_cache\oculus_sdk.html https://developer.oculus.com/downloads/package/oculus-sdk-for-windows/1.41.0/
  # download and extract Oculus SDK
  - ps: |
      $url = select-string -Path 'c:\projects\download_cache\oculus_sdk.html'  -Pattern 'https:\/\/securecdn\.oculus\.com\/binaries\/download\/\?id=[0-9]+&amp;access_token=[0-9A-Za-z%]+' -AllMatches | % {$_.Matches} | % {$_.Value}
      Invoke-WebRequest -Uri $url -OutFile 'c:\projects\download_cache\oculus_sdk.zip'
      cd c:\projects\revive\Externals
      unzip c:\projects\download_cache\oculus_sdk.zip
  # install required NSIS plugins
  - ps: |
      Invoke-WebRequest -Uri 'https://nsis.sourceforge.io/mediawiki/images/4/4a/AccessControl.zip' -OutFile 'c:\projects\download_cache\NSIS_AccessControl.zip'
      cd c:\projects\download_cache
      unzip NSIS_AccessControl.zip
      copy Plugins\AccessControl.dll 'C:\Program Files (x86)\NSIS\Plugins\x86-ansi'
      copy Unicode\Plugins\AccessControl.dll 'C:\Program Files (x86)\NSIS\Plugins\x86-unicode'
      
build_script:
  # Ensure vcpkg dependencies are installed
  - ps: |
      vcpkg integrate install
      vcpkg install openxr-loader:x64-windows glfw3:x64-windows-static glfw3:x86-windows-static
      mkdir C:\projects\Revive\ReviveXR\bin
      copy C:\Tools\vcpkg\installed\x64-windows\bin\openxr_loader.dll C:\projects\Revive\ReviveXR\bin\openxr_loader.dll
  # build Revive
  - ps: |
      cd c:\projects\revive
      msbuild Revive.sln /t:Build /p:Configuration=Release /p:Platform=x64
      msbuild Revive.sln /t:Build /p:Configuration=Release /p:Platform=x86
      
after_build:
  # copy additional files to the release folders
  - ps: |
      cd c:\projects\revive\release
      copy ..\Externals\WinSparkle\x64\Release\WinSparkle.dll .
      copy ..\ReviveOverlay\SupportAssets . -Filter "*.jpg" -Recurse -Container
      copy C:\openssl-v111-win64\bin\libcrypto-1_1-x64.dll .
      copy C:\openssl-v111-win64\bin\libssl-1_1-x64.dll .
  # gather built Revive files
  - cmd: |
      cd c:\projects\Revive\Release
      7z a Revive.zip ReviveInjector.exe LibRevive32.dll LibRevive64.dll LibRXRRT64.dll openxr_loader.dll
  # Run NSIS to generate installer
  - ps: |
      cd c:\projects\Revive\Installer
      $env:Path += ";C:\Program Files (x86)\NSIS"
      If ($env:APPVEYOR_REPO_TAG -eq "false" -Or $env:APPVEYOR_REPO_TAG_NAME -like "*beta") {
        makensis /DDEV_BUILD Revive.nsi
      } Else {
        makensis Revive.nsi
      }

artifacts:
  - path: Installer\ReviveInstaller.exe
    name: Revive Installer
  - path: Release\Revive.zip
    name: Revive Build

deploy:
  provider: GitHub
  auth_token:
    secure: cF/5tvydhc3y7edEeG6TW0luUQjW9zBvDE4T+jfQjvz9tDAdMsjgw2ZEDmh9qP/n
  artifact: 'Revive Installer'
  draft: true
  prerelease: false
  on:
    APPVEYOR_REPO_TAG: true
